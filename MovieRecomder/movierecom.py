# -*- coding: utf-8 -*-
"""MovieRecom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16lXwGtLxBmMiiJmNWxXgXPTEs2XivyDN
"""

import pandas as pd
import numpy as np

# from google.colab import drive
# drive.mount('/content/drive')

movies1 = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

display(movies1.head())

#genre, title, keywords, Overview, cast, crew

movies = movies1[['id','genres', 'title', 'keywords', 'overview', 'vote_average', 'vote_count']]

credits = credits[['cast', 'crew', 'title']]

movies = movies.merge(credits, on='title')

movies

movies = movies.dropna().reset_index(drop=True)

import ast
def listConverter(obj):
  Genre=[]
  for i in ast.literal_eval(obj):
    Genre.append(i['name'])
  return Genre

def castConverter(obj):
  Genre=[]
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      Genre.append(i['name'])
      counter+=1
    else:
      break
  return Genre

def fetch_Director(obj):
  dir = []
  for i in ast.literal_eval(obj):
      if i['job'] == 'Director':
        dir.append(i['name'])
        break
  return dir

movies['id']=movies['id']
movies['genres']=movies['genres'].apply(listConverter)
movies['keywords']=movies['keywords'].apply(listConverter)
movies['cast']=movies['cast'].apply(castConverter)
movies['crew']=movies['crew'].apply(fetch_Director)

movies['tags'] = movies['overview'] + movies['genres'].apply(lambda x: " ".join(x)) + movies['keywords'].apply(lambda x: " ".join(x)) + movies['cast'].apply(lambda x: " ".join(x)) + movies['crew'].apply(lambda x: " ".join(x))
# movies['tags'] = movies['tags'].apply(lambda x:x.lower().replace(" ", ""))

movies['tags'][0]

from sklearn.feature_extraction.text import TfidfVectorizer
tdf = TfidfVectorizer(max_features=5000, stop_words='english')
vectors = tdf.fit_transform(movies['tags']).toarray()

from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
model = SentenceTransformer('all-MiniLM-L6-v2')
embeddings = model.encode(movies['tags'])
similarity = cosine_similarity(embeddings)

similarity

c = movies['vote_average'].mean()
m = movies['vote_count'].quantile(0.7)

def weighted_rating(x, m=m, C=c):
    v = x['vote_count']
    R = x['vote_average']
    return (v / (v + m)) * R + (m / (m + v)) * C

movies['score'] = movies.apply(weighted_rating, axis = 1)

import pickle as pkl

pkl.dump(similarity, open('similarityNew.pkl', 'wb'))
pkl.dump(movies, open('moviesNew.pkl', 'wb'))



def recommend(movie):
  # movie = movie.lower().replace(" ", "")
  movie_index = movies[movies['title']==movie].index[0]
  if movie_index==-1:
    print("movie not found")
    return
  distances = similarity[movie_index]
  movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:(x[1], movies.iloc[x[0]]['score']))[1:6]
  for i in movies_list:
    print(movies.iloc[i[0]].title)

# import pickle as pkl

# pkl.dump(movies1, open('movies1.pkl', 'wb'))
# # pkl.dump(similarity, open('similarity.pkl', 'wb'))

